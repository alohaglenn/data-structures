/*
Create a Hash Table class that contains table and size properties. It should create an array of size n based on a given integer n.

Don't worry about handling collisions. For this implementation, it's okay if we overwrite values that have the same hash. Just focus on the basic implementation.

The Hash Table class should have the following methods:
generateHash - generates an index within the table where the value should be stored
add - inserts a value into the index position generated by the hash function
remove - deletes a value from the table based on the given key
get - retrieves a value based on the given key

Examples:

const ht = new HashTable(5); => array with 5 empty items, size = 5
ht.add('album', 'good kid maad city'); => generates a hash of 1, stores 'good kid maad city' at index 1 of table
ht.add('artist', 'Kendrick Lamar'); => generates a hash of 3, stores 'Kendrick Lamar' at index 3 of table
ht.get('album'); => returns 'good kid maad city'
ht.get('artist'); => returns 'Kendrick Lamar'
ht.remove('artist'); => deletes 'Kendrick Lamar' from table
*/

class HashTable {
  constructor(size) {
    this.table = new Array(size);
    this.size = size;
  }

  generateHash(key) {
    let hash = 0;
    for (const char of key) {
      hash += char.charCodeAt(0);
    }
    return hash % this.size;
  }

  add(key, value) {
    const hash = this.generateHash(key);
    this.table[hash] = value;
  }

  remove(key) {
    const hash = this.generateHash(key);
    delete this.table[hash];
  }

  get(key) {
    const hash = this.generateHash(key);
    return this.table[hash];
  }
}

export default HashTable;
